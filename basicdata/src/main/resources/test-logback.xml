<?xml version="1.0" encoding="utf-8" ?>
<!-- 日志配置 -->
<!--
<configuration>是logback.xml的文件的根节点，它包含如下属性
1.scan: 当此属性设置为true时, 配置文件如果发生改变，将会被重新加载，默认值为true
2.scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
  当scan为true时，此属性生效。默认的时间间隔为1分钟。
3.debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
-->
<configuration>
    <!--
    property和springProperty这两个节点可以设置全局变量
    property可以直接设置，如
    <property name="logFile" value="logs/mutest"/>
    设置了一个名为logFile的变量，后续通过${logFile}的方式就引用到了其值logs/mutest
    而springProperty则要配合配置文件，如
    <springProperty name="logFile" source="log.file"/>
    也是设置了一个名为logFile的变量，但没有直接赋值，而是通过source指向了配置文件的路径，配置文件中是这样的：
    log:
      file: logs/mutest
    -->

    <!-- 直接定义配置（非必须） -->
    <property name="log.path" value="/home/elk-log"/>

    <!-- 通过配置文件定义属性（非必须）-->
<!--    <springProperty name="" source=""/>-->


    <!-- appender节点是一个非常关键的节点，负责格式化一个日志输出节点（也就是
         描述日志存储类型、位置、滚动规则等属性）。appender的作用类似于构造一个日志模板，而
         logger是真正的日志输出者，使用某个appender作为模板去写日志
         appender有三种类型，分别是ConsoleAppender(控制台日志)、FileAppender(文件日志)、RollingFileAppender（滚动日志文件）。

    -->
    <!-- 定义并描述一个日志的输出属性-->
    <appender name="" class="">
    </appender>

    <!--
         logger节点，可选节点，作用是指明具体的包或类的日志输出级别，以及要使用的appender,
         可以把appender理解为一个日志模板
         1.name： 必写属性，指定具体包或类，被指定的包或类中的日志输出将遵从该logger规定的配置。
         2.level: 非必写属性，指定日志输出级别，该级别将覆盖root配置的输出级别。
         3.additivity: 非必写属性，是否向上级logger传递打印信息。默认为true
         4.appender-ref: 引用的appender,引用后将实现appender中定义的行为，例如
           示例中引用了fileLog这个appender，那么com.mutest.demo中打印的日志将按fileLog的配置进行记录。
           一个logger可以有多个引用，互不影响。
    -->
    <!-- 创建一个具体的日志输出-->
    <logger name="" level="" additivity="">

    </logger>

    <!--
        root节点，必选节点，用来指定最基础的日志输出级别并指定appender，可以理解为根logger
    -->
    <!-- 基础日志输出-->
    <root level="">
        <appender-ref ref=""/>
    </root>


</configuration>